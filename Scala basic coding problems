/**
   * Q.1 WAP to print Hello World in Scala.
   */

object HelloWorld{
    def main(args:Array[String]){
        println("Hello World to Scala!!!")
    }
}

/**
   * Q.2 WAP to find sum of two numbers if the numbers are same then tripe the sum else get the sum of two numbers
   */
object solution{
   def sumconditional(x:Int,y:Int):Int={
       if(x==y) (x+y)*3 else x+y
   }
   
   def main(args:Array[String]):Unit={
       println("The sum is :"+ sumconditional(11,22))
       println("The sum is :"+sumconditional(3,3))
   }
}


/**
   * Q.3 WAP to find absolute difference n and 51.if n>51 return triple the absolute difference else return the absolute difference.
   */
object solution{
   def absdiff(n:Int):Int={
       if(n>51) (n-51).abs*3 else (n-51).abs
   }
   
   def main(args:Array[String]):Unit={
       println("The difference is :"+ absdiff(50))
       println("The difference is :"+ absdiff(52))
   }
}


/**
   * Q.4 WAP to check two given integers and return true if one of them is 30 or if their sum is 30.
   */
object solution{
   def diff(x:Int,y:Int):Unit={
       if(x+y ==30) {
            println("True");
         } 
       else if (x==30 || y==30) {
            println("True");
         }
        else {
            println("False");
        }
   }
   
   def main(args:Array[String]):Unit={
        diff(10,20)
        diff(30,40)
        diff(80,40)
   }
}


/**
   * Q.5 WAP to check whether a given positive number is a multiple of 3 or a multiple of 7.
   */

object solution {
    def multiple_37(n:Int):Unit={
        if (n%3==0 || n%7==0){
            println("The given number is a multiple of 3 or 7");
         }
        else{
             println("The given number is not a multiple of 3 or 7");
        }
           
    }

    def main(args: Array[String]) {
       multiple_37(30) 
       multiple_37(70)
       multiple_37(29) 
}
}


/**
   * Q.6 WAP to check whether one of the given temperatures is less than 0 and other is greater than 100.
   */

object solution {
    def temprature(x:Int,y:Int):Unit={
        if (x<0 && y>100){
            println("You have satisfied the temprature conditions!!!");
         }
        else{
             println("You have not satisfied the temprature conditions! try again!");
        }
           
    }

    def main(args: Array[String]) {
       temprature(-3,110) 

}
}

/**
   * Q.7 WAP to check the largest numbers among three given integers.
   */


object solution {
    def greatest(x:Int, y:Int,z:Int):Int={
        if (x>y && x>z) x
        else if (y>x && y>z) y
        else if (z>x && z>y) z 
        else 0
        
    }

    def main(args: Array[String]) {
        print("The greatest number is: " + greatest(17,37,57));
        print("\nThe greatest number is: " + greatest(30,18,13));
        print("\nThe greatest number is: " + greatest(24,13,17));
        print("\nThe greatest number is: " + greatest(90,69,130));
    }
}


/**
   * Q.8 WAP to check whether two given positive integers have the same last digit. 
   */

   
   object solution {
    def samelastdigit(x:Int,y:Int):Unit={
        if ((x-y)%10==0){
            println("The last digit of the both numbers are same!!!");
         }
        else{
             println("The last digit of the both numbers are not same!!!");
        }
           
    }

    def main(args: Array[String]) {
       samelastdigit(10034,4) 

}
}


/**
   * Q.9 WAP to check a given integer and return true if it is within 20 of 100 or 300.
   */
  
  
  object solution {
    def difffromref(x:Int):Unit={
        if ((x-100).abs<=20 ||(x-300).abs<=20){
            println("The number is at correct difference from 100 or 300 !!!\n True");
         }
        else{
             println("The number is  not at correct difference from 100 or 300 !!!\n False");
        }
           
    }

    def main(args: Array[String]) {
       difffromref(80) 
       difffromref(280) 
       difffromref(800) 

}
}


/**
   * Q.10 WAP  to check two integers whether either of them is in the range 100..200 inclusive.
   */

object solution {
    def inrange(x:Int,y:Int):Unit={
        if (x>=100 && x<=200){
            println("The x is within the range from 100 or 200 !!!\n True");
         }
        else{
             println("The x is not in the range from 100 or 200 !!!\n False");
        }
        if (y>=100 && y<=200){
            println("The y is within the range from 100 or 200 !!!\n True");
         }
        else{
             println("The y is not in the range from 100 or 200 !!!\n False");
        }
           
    }

    def main(args: Array[String]) {
       inrange(249,399) 
       

}
}

/**
   * Q.11 WAP to check whether two given integers are in the range 40..50 inclusive,or they are both in the range 50..60 inclusive.
   */


object solution {
    def inrange(x:Int,y:Int):Unit={
        if ((x>=40 && x<=50)  && (y>=40 && y<=50)){
            println("The x and y are within the range from 40 and 50 !!!\n True");
         }
        else{
            println("The x  and y are not in the range from 40 or 50 !!!\n False");
        }
        if ((x>=50 && x<=60)  && (y>=50 && y<=60)){
            println("The x and y are within the range from 50 and 60 !!!\n True");
         }
        else{
             println("The x  and y are not in the range from 50 or 60 !!!\n False");
        }
           
    }

    def main(args: Array[String]) {
       inrange(80,90) 
       inrange(40,90) 
       inrange(45,49) 
       inrange(55,59) 
       inrange(80,58) 

}
}


/**
   * Q.12 WAP to find the larger value from two positive integer values in the range 20..30 inclusive,or return 0 if neither is in that range.
   */
   

object solution {
    def inrange(x:Int,y:Int):Unit={
        if ((x>=20 && x<=30)  && (y>=20 && y<=30)){
            println("The x and y  are in the range from 20 or 30 and the larger one is: !!!\n True");
            if (x>y) {
                println("The x is larger one : !!!" +x);    
               
         }
         
            else{
                println("The y is larger one : !!!" +y)
            }
            
        }
        
        if ((x<20 || x>30)  && (y<20 || y>30)){
          println("you have entered values outside range please again put the values within the range")
        } 
        
       
    }

    def main(args: Array[String]) {
       inrange(27,26)
       inrange(26,29)
       inrange(34,35)

}
}

/**
   * Q.1 WAP to create a list 
   */
   
   
object Solution {
    def main(args: Array[String]) {
        var a:List[Int]=List(1,2,3,4)
        println("The element of the list are:" + a)
    }
}

/**
   * Q.2 WAP to add single element and multiple elements to a given listbuffer/List
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  //As a List is immutable we use ListBuffer
  var colors = new ListBuffer[String]()
  println("Add Single element in the said list:")
  colors += "A"
  colors += "B"
  colors += "C"
  println(colors)
  println("Add multiple elements in the said list:")
  colors ++= List("D","E","F")
  println(colors) 
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}
 
 /**
   * Q.3 WAP to remove single and multiple elements from a given listbuffer/List
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[String]()
  println("Remove Single element in the said list:")
  colors += "A"
  colors += "B"
  colors += "C"
  colors += "P"
  colors += "Q"
  colors += "R"
  println(colors)
  colors -= "R"
  println(colors)
  println("Remove multiple elements in the said list:")
  colors --= List("C", "B")
  println(colors) 
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}
 
 
 /**
   * Q.4 WAP to delete elements from a given list.
   */
   
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[String]()
  println("Remove Single element in the said list:")
  colors += "A"
  colors += "B"
  colors += "C"
  colors += "P"
  colors += "Q"
  colors += "R"
  println(colors)
  colors.remove(0,5)
  println(colors)
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}
  
  
   /**
   * Q.5 WAP to iterate over a list to print the elements and calculate the sum and product of all elements of this list.
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[Int]()
  colors += 1
  colors += 2
  colors += 3
  colors += 4
  colors += 5
  colors += 6
  println(colors)
  for (p<- colors)
  println(p)
  val result =colors.sum
  println(result)
  val result_1 =colors.product
  println(result_1)
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}   

 /**
   * Q.6 WAP to find the largest and smallest from a given List
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {  
  var jj = new ListBuffer[Int]()
  jj +=  12
  jj +=  14   //B
  jj +=  6
  jj +=  4
  jj +=  28
  jj +=  30
  println(jj)
  val tmp=jj.max
  println(tmp)
  val tmp1=jj.min
  println(tmp1)
  
  }
}
   
    /**
   * Q.7 WAP to remove duplicates from a given list
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[Int]()
  colors += 1
  colors += 2
  colors += 3
  colors += 4
  colors += 5
  colors += 6
  colors += 6
  println(colors)
  val result =colors.distinct
  println(result)
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}

   /**
   * Q.8 WAP to check a given list is empty or not
   */
   
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[Int]()
  colors += 1
  colors += 2
  colors += 3
  colors += 4
  colors += 5
  colors += 6
  colors += 6
  println(colors)
  val result =colors.isEmpty
  println(result)
  var jj = new ListBuffer[Int]()
  val result_1 =jj.isEmpty
  println(result_1)
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}
   
   
   /**
   * Q.9 WAP to get difference between two given lists.
   */
   
object Scala_List
{ 
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var tt = new ListBuffer[Int]()
  tt += 1
  tt += 2  //A
  tt += 3
  tt += 4
  tt += 5
  tt += 6
 
  println(tt)
  
  var jj = new ListBuffer[Int]()
  jj +=  12
  jj +=  14   //B
  jj +=  6
  jj +=  4
  jj +=  28
  jj +=  30
  println(jj)
  val tmp=jj.toSet
  val result=tt.filterNot(tmp) //A-B
  println(result)
  val tmp1=tt.toSet
  val result1=jj.filterNot(tmp1) //B-A
  println(result1)
  
  println("Convert the ListBuffer to a List:")
  val tt_list = tt.toList
  println(tt_list)   
  val jj_list = jj.toList
  println(jj_list)   
  }
}
   
   
    /**
   * Q.10 WAP to find the first and last element of a given list
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var jj = new ListBuffer[Int]()
  jj +=  12
  jj +=  14   //B
  jj +=  6
  jj +=  4
  jj +=  28
  jj +=  30
  println(jj)
  val tmp=jj.head
  println(tmp)
  val tmp1=jj.last
  println(tmp1)
  
  }
}   

/**
   * Q.11 WAP to find the index of an element in a given list
   */
   
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {  
  var jj = new ListBuffer[Int]()
  jj +=  12
  jj +=  14   //B
  jj +=  6
  jj +=  4
  jj +=  28
  jj +=  30
  println(jj)
  val tmp=jj.indexOf(30)
  println(tmp) 
  }
}
   
   
   /**
   * Q.12 WAP to merge given lists
   */
   
object Solution
{
  
  def main(args: Array[String]): Unit = 
 {
  var tt =  List(1,2,3,4,5)
  println(tt)
  // merge list ++,:::,concat method
  var jj = List(12,14,6,4,28,30)
  println(jj)
  val tmp=tt ++ jj
  val tmp1=tt ::: jj
  val tmp2=List.concat(tt,jj)
  println(tmp)
  println(tmp1)
  println(tmp2)
 
  }
}   
   
   
   /**
   * Q.13 WAP to find the even and odd numbers from a given list
   */
   
object Solution
{
  
  def main(args: Array[String]): Unit = 
 {
  var tt =  List(1,2,3,4,5)
  println(tt)
  var jj = List(12,14,6,4,28,30)
  println(jj)
  val even_nums=tt.filter(_%2 ==0)
  val odd_nums=tt.filter(_%2 !=0)
  println(even_nums)
  println(odd_nums)
  }
}   

/**
   * Q.14 WAP to find the nth element of a given list
   */
   
object Solution
{
  def Pth_num[A](nums:List[A],n:Int):A={
    nums(n)
  }
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  println(Pth_num(nums,2))
 
  }
}   

/**
   * Q.15 WAP to find an element from the last position of a given list
   */
   
object Solution
{
  def last_Pth_num[A](nums:List[A],n:Int):A={
    nums.takeRight(n).head
  }
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  println(last_Pth_num(nums,2))
 
  }
}   
   
   
   /**
   * Q.16 WAP to reverse a given list
   */
   
   
object Solution
{
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  var k=nums.reverse
  println(k)
  }
}   

  /**
   * Q.17 WAP to add each element n times to a given list of integers
   */
   
   
object Solution
{
  def n_times_elem[P](list:List[P],n:Int):List[P]={
    list flatMap{element=>List.fill(n)(element)}
  }
 
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
 println(n_times_elem(nums,4))
}
}
   
   
     /**
   * Q.18 WAP to check whether a list contains a sublist
   */
   
   
object Solution
{
  def sublist[P](list1:List[P],list2:List[P]):Boolean={
    list1.forall(list2.contains)
  }
 
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
 println(sublist(List(1,2,5), List(1,2,3,4)))
}
}
   
    /**
   * Q.19 *WAP to count the number of occurrences of each element in a given list
   */
   
   
object Solution
{
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6,6,6,7,9,7)
  println(nums)
  var v=nums.groupBy(identity).mapValues(_.size)
  println(v)
  }
}   
   
   
     /**
   * Q.20 WAP to split a given list into two lists
   */
   
   
object Solution
{
  def split_List[P](nums:List[P],n:Int):(List[P],List[P])={
    (nums.take(n),nums.drop(n))
  }
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  println(split_List(nums,2))
  }
}
   
   
     /**
   * Q.21 WAP to calculate the length of a given list 
   */
   
   
object Solution
{
 
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  var k=nums.length
  println(k)
  }
}   
   
   
    /** Array
   * Q.1 WAP to sum values of an given array.
   */
   
object Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(20,30,40,60,70)
      
        println("Array elements are : ")
        var sum =0
        for ( m <- 0 to (Marks.length-1)) {
          sum+=Marks(m);
            
        }
        println("sum is " + sum)
    }
}

   /** 
   * Q.2 WAP to calculate the average value of an array of element.
   */
   
   
object Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(78,89,56,45,79,146,178,193,167,154)
      
        println("Array elements are : ")
        var sum =0.0
        var avg=0.0
        for ( m <- 0 to (Marks.length-1)) {
          sum+=Marks(m);
          avg=sum/Marks.length  
        }
        println("sum is " + sum);
        println("avg is " + avg);
    }
}


     /** 
   * Q.3 WAP to find index of an element in a given array >-Exception in thread "main" scala.util.control.BreakControl
   */
   
   
import scala.util.control.Breaks._
object Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(78,89,56,45,79,146,178,193,167,154)
        for ( m <- 0 to (Marks.length-1)) {
          var v=0;
          v=Marks.indexWhere(_ ==154);
          println(v);
          break;
        }
        
       
    }
}   

   /** 
   * Q.4 WAP to find maximum and minimum value of an array of integers.
   */
   
   
object Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(78,89,56,45,79,146,178,193,167,154,224)
        var max= Marks(0);
        for ( m <- 0 to (Marks.length-1)) {
           if (Marks(m)>max){
             max=Marks(m);
           }
        }
        var min= Marks(0);
        for ( m <- 0 to (Marks.length-1)) {
           if (Marks(m)<min){
             min=Marks(m);
           }
        }
        println("Max is " + max);
        println("Min is " + min);
    }
}

  /** 
   * Q.5 WAP to find common  elements between two arrays of integers.
   */
   
   
object Solution {
   def main(args: Array[String]) {
        var code=Array(40,50,60,70,80)
        var rack=Array(41,51,65,75,80)
        //var i=0
        for(r<-0 to rack.length-1){
            for(c<-0 to code.length-1){
                if (rack(r)==code(c)){
                    println("the common value is " + rack(r));
                    }
            }
        }
  }
}   


 /** 
   * Q.6 WAP to find common  elements between two arrays of strings
   */
   
   
object Solution {
   def main(args: Array[String]) {
        var code=Array('A','B','C')
        var rack=Array('Q','E','C')
        //var i=0
        for(r<-0 to rack.length-1){
            for(c<-0 to code.length-1){
                if (rack(r)==code(c)){
                    println("the common value is " + rack(r));
                    }
            }
        }
  }
}

/** 
   * Q.7 WAP to remove duplicate elements between two arrays of strings
   */
   

object Scala_Array {   
   def main(args: Array[String]): Unit = {     
       var tt = Array("kty", "jhk", "opu", "lpo", "sdo", "yui", "kty");
       //println("Orginal array:")
       for ( x <- tt) {
         print(s"${x}, ")    
        }      

        var f =0
        for (i <- 0 to tt.length-1)
         {
           var x = f+1;
           for (j <- x to tt.length-1)
            {
                if(tt(f) == tt(x) && (f != x) )
                {
                    println("\nThere is a duplicate element in the array: "+tt(x));
                }
              x=x+1;
            }
           f=f+1;
        }
       }
}


/** 
   * Q.8 WAP to remove duplicate elements between two arrays of integers
   */
   

object Scala_Array {   
   def main(args: Array[String]): Unit = {     
       var pk = Array(1,2,3,4,1,5,6,7,8,8,9);
       //println("Orginal array:")
       for ( x <- pk) {
         print("\nThe array is " +x)        
        }      

        var f =0
        for (i <- 0 to pk.length-1)
         {
           var x = f+1;
           for (j <- x to pk.length-1)
            {
                if(pk(f) == pk(x) && (f != x) )
                {
                    println("\nThere is a duplicate element in the array "+pk(x));
                }
              x=x+1;
            }
           f=f+1;
        }
       }
}
   
   
   /** 
   * Q.9 WAP to get difference between the largest and smallest values in an array of integers.The length of the array must be 1 and above.
   */
   
bject Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(78,89,56,45,79,146,178,193,167,154,224,567,345,789,765)
        var max= Marks(0);
        for ( m <- 0 to (Marks.length-1)) {
           if (Marks(m)>max){
             max=Marks(m);
           }
        }
        var min= Marks(0);
        for ( m <- 0 to (Marks.length-1)) {
           if (Marks(m)<min){
             min=Marks(m);
           }
        }
        var diff=max-min;
        println("Max is " + max);
        println("Min is " + min);
        println("The difference between maximum and minimum element of the array is "+ diff);
    }
}

  /** 
   * Q.10 WAP to remove duplicate elements of a given sorted array and return the new length of the array.
   */


object tt {
  val nums = Array(70, 70, 30, 40, 90, 90, 90, 60, 60);
   println(s"Original array length: ${nums.length}");
    println("Array elements are: ");
  def uv(nums: Array[Int]): Int = {
    var index = 1;
    for (i <- 0 to nums.length - 1) {
      if (nums(i) != nums(index)) {
        index += 1
        nums(index) = nums(i)
      }
    }
    index;
  }

  def main(args: Array[String]): Unit = {
    for (i <- 0 to nums.length - 1) {
      print(s"${nums(i)} ");
    }
    println(s"\nThe new length of the array after removing the duplicate elements is: ${uv(nums)}");
  }
}
   

