/**
   * Q.1 WAP to print Hello World in Scala.
   */

object HelloWorld{
    def main(args:Array[String]){
        println("Hello World to Scala!!!")
    }
}

/**
   * Q.2 WAP to find sum of two numbers if the numbers are same then tripe the sum else get the sum of two numbers
   */
object solution{
   def sumconditional(x:Int,y:Int):Int={
       if(x==y) (x+y)*3 else x+y
   }
   
   def main(args:Array[String]):Unit={
       println("The sum is :"+ sumconditional(11,22))
       println("The sum is :"+sumconditional(3,3))
   }
}


/**
   * Q.3 WAP to find absolute difference n and 51.if n>51 return triple the absolute difference else return the absolute difference.
   */
object solution{
   def absdiff(n:Int):Int={
       if(n>51) (n-51).abs*3 else (n-51).abs
   }
   
   def main(args:Array[String]):Unit={
       println("The difference is :"+ absdiff(50))
       println("The difference is :"+ absdiff(52))
   }
}


/**
   * Q.4 WAP to check two given integers and return true if one of them is 30 or if their sum is 30.
   */
object solution{
   def diff(x:Int,y:Int):Unit={
       if(x+y ==30) {
            println("True");
         } 
       else if (x==30 || y==30) {
            println("True");
         }
        else {
            println("False");
        }
   }
   
   def main(args:Array[String]):Unit={
        diff(10,20)
        diff(30,40)
        diff(80,40)
   }
}


/**
   * Q.5 WAP to check whether a given positive number is a multiple of 3 or a multiple of 7.
   */

object solution {
    def multiple_37(n:Int):Unit={
        if (n%3==0 || n%7==0){
            println("The given number is a multiple of 3 or 7");
         }
        else{
             println("The given number is not a multiple of 3 or 7");
        }
           
    }

    def main(args: Array[String]) {
       multiple_37(30) 
       multiple_37(70)
       multiple_37(29) 
}
}


/**
   * Q.6 WAP to check whether one of the given temperatures is less than 0 and other is greater than 100.
   */

object solution {
    def temprature(x:Int,y:Int):Unit={
        if (x<0 && y>100){
            println("You have satisfied the temprature conditions!!!");
         }
        else{
             println("You have not satisfied the temprature conditions! try again!");
        }
           
    }

    def main(args: Array[String]) {
       temprature(-3,110) 

}
}

/**
   * Q.7 WAP to check the largest numbers among three given integers.
   */


object solution {
    def greatest(x:Int, y:Int,z:Int):Int={
        if (x>y && x>z) x
        else if (y>x && y>z) y
        else if (z>x && z>y) z 
        else 0
        
    }

    def main(args: Array[String]) {
        print("The greatest number is: " + greatest(17,37,57));
        print("\nThe greatest number is: " + greatest(30,18,13));
        print("\nThe greatest number is: " + greatest(24,13,17));
        print("\nThe greatest number is: " + greatest(90,69,130));
    }
}


/**
   * Q.8 WAP to check whether two given positive integers have the same last digit. 
   */

   
   object solution {
    def samelastdigit(x:Int,y:Int):Unit={
        if ((x-y)%10==0){
            println("The last digit of the both numbers are same!!!");
         }
        else{
             println("The last digit of the both numbers are not same!!!");
        }
           
    }

    def main(args: Array[String]) {
       samelastdigit(10034,4) 

}
}


/**
   * Q.9 WAP to check a given integer and return true if it is within 20 of 100 or 300.
   */
  
  
  object solution {
    def difffromref(x:Int):Unit={
        if ((x-100).abs<=20 ||(x-300).abs<=20){
            println("The number is at correct difference from 100 or 300 !!!\n True");
         }
        else{
             println("The number is  not at correct difference from 100 or 300 !!!\n False");
        }
           
    }

    def main(args: Array[String]) {
       difffromref(80) 
       difffromref(280) 
       difffromref(800) 

}
}


/**
   * Q.10 WAP  to check two integers whether either of them is in the range 100..200 inclusive.
   */

object solution {
    def inrange(x:Int,y:Int):Unit={
        if (x>=100 && x<=200){
            println("The x is within the range from 100 or 200 !!!\n True");
         }
        else{
             println("The x is not in the range from 100 or 200 !!!\n False");
        }
        if (y>=100 && y<=200){
            println("The y is within the range from 100 or 200 !!!\n True");
         }
        else{
             println("The y is not in the range from 100 or 200 !!!\n False");
        }
           
    }

    def main(args: Array[String]) {
       inrange(249,399) 
       

}
}

/**
   * Q.11 WAP to check whether two given integers are in the range 40..50 inclusive,or they are both in the range 50..60 inclusive.
   */


object solution {
    def inrange(x:Int,y:Int):Unit={
        if ((x>=40 && x<=50)  && (y>=40 && y<=50)){
            println("The x and y are within the range from 40 and 50 !!!\n True");
         }
        else{
            println("The x  and y are not in the range from 40 or 50 !!!\n False");
        }
        if ((x>=50 && x<=60)  && (y>=50 && y<=60)){
            println("The x and y are within the range from 50 and 60 !!!\n True");
         }
        else{
             println("The x  and y are not in the range from 50 or 60 !!!\n False");
        }
           
    }

    def main(args: Array[String]) {
       inrange(80,90) 
       inrange(40,90) 
       inrange(45,49) 
       inrange(55,59) 
       inrange(80,58) 

}
}


/**
   * Q.12 WAP to find the larger value from two positive integer values in the range 20..30 inclusive,or return 0 if neither is in that range.
   */
   

object solution {
    def inrange(x:Int,y:Int):Unit={
        if ((x>=20 && x<=30)  && (y>=20 && y<=30)){
            println("The x and y  are in the range from 20 or 30 and the larger one is: !!!\n True");
            if (x>y) {
                println("The x is larger one : !!!" +x);    
               
         }
         
            else{
                println("The y is larger one : !!!" +y)
            }
            
        }
        
        if ((x<20 || x>30)  && (y<20 || y>30)){
          println("you have entered values outside range please again put the values within the range")
        } 
        
       
    }

    def main(args: Array[String]) {
       inrange(27,26)
       inrange(26,29)
       inrange(34,35)

}
}

/**
   * Q.1 WAP to create a list 
   */
   
   
object Solution {
    def main(args: Array[String]) {
        var a:List[Int]=List(1,2,3,4)
        println("The element of the list are:" + a)
    }
}

/**
   * Q.2 WAP to add single element and multiple elements to a given listbuffer/List
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  //As a List is immutable we use ListBuffer
  var colors = new ListBuffer[String]()
  println("Add Single element in the said list:")
  colors += "A"
  colors += "B"
  colors += "C"
  println(colors)
  println("Add multiple elements in the said list:")
  colors ++= List("D","E","F")
  println(colors) 
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}
 
 /**
   * Q.3 WAP to remove single and multiple elements from a given listbuffer/List
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[String]()
  println("Remove Single element in the said list:")
  colors += "A"
  colors += "B"
  colors += "C"
  colors += "P"
  colors += "Q"
  colors += "R"
  println(colors)
  colors -= "R"
  println(colors)
  println("Remove multiple elements in the said list:")
  colors --= List("C", "B")
  println(colors) 
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}
 
 
 /**
   * Q.4 WAP to delete elements from a given list.
   */
   
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[String]()
  println("Remove Single element in the said list:")
  colors += "A"
  colors += "B"
  colors += "C"
  colors += "P"
  colors += "Q"
  colors += "R"
  println(colors)
  colors.remove(0,5)
  println(colors)
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}
  
  
   /**
   * Q.5 WAP to iterate over a list to print the elements and calculate the sum and product of all elements of this list.
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[Int]()
  colors += 1
  colors += 2
  colors += 3
  colors += 4
  colors += 5
  colors += 6
  println(colors)
  for (p<- colors)
  println(p)
  val result =colors.sum
  println(result)
  val result_1 =colors.product
  println(result_1)
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}   

 /**
   * Q.6 WAP to find the largest and smallest from a given List
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {  
  var jj = new ListBuffer[Int]()
  jj +=  12
  jj +=  14   //B
  jj +=  6
  jj +=  4
  jj +=  28
  jj +=  30
  println(jj)
  val tmp=jj.max
  println(tmp)
  val tmp1=jj.min
  println(tmp1)
  
  }
}
   
    /**
   * Q.7 WAP to remove duplicates from a given list
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[Int]()
  colors += 1
  colors += 2
  colors += 3
  colors += 4
  colors += 5
  colors += 6
  colors += 6
  println(colors)
  val result =colors.distinct
  println(result)
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}

   /**
   * Q.8 WAP to check a given list is empty or not
   */
   
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var colors = new ListBuffer[Int]()
  colors += 1
  colors += 2
  colors += 3
  colors += 4
  colors += 5
  colors += 6
  colors += 6
  println(colors)
  val result =colors.isEmpty
  println(result)
  var jj = new ListBuffer[Int]()
  val result_1 =jj.isEmpty
  println(result_1)
  println("Convert the ListBuffer to a List:")
  val colors_list = colors.toList
  println(colors_list)   
  }
}
   
   
   /**
   * Q.9 WAP to get difference between two given lists.
   */
   
object Scala_List
{ 
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var tt = new ListBuffer[Int]()
  tt += 1
  tt += 2  //A
  tt += 3
  tt += 4
  tt += 5
  tt += 6
 
  println(tt)
  
  var jj = new ListBuffer[Int]()
  jj +=  12
  jj +=  14   //B
  jj +=  6
  jj +=  4
  jj +=  28
  jj +=  30
  println(jj)
  val tmp=jj.toSet
  val result=tt.filterNot(tmp) //A-B
  println(result)
  val tmp1=tt.toSet
  val result1=jj.filterNot(tmp1) //B-A
  println(result1)
  
  println("Convert the ListBuffer to a List:")
  val tt_list = tt.toList
  println(tt_list)   
  val jj_list = jj.toList
  println(jj_list)   
  }
}
   
   
    /**
   * Q.10 WAP to find the first and last element of a given list
   */
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {
  var jj = new ListBuffer[Int]()
  jj +=  12
  jj +=  14   //B
  jj +=  6
  jj +=  4
  jj +=  28
  jj +=  30
  println(jj)
  val tmp=jj.head
  println(tmp)
  val tmp1=jj.last
  println(tmp1)
  
  }
}   

/**
   * Q.11 WAP to find the index of an element in a given list
   */
   
   
object Scala_List
{
  import scala.collection.mutable.ListBuffer
  def main(args: Array[String]): Unit = 
 {  
  var jj = new ListBuffer[Int]()
  jj +=  12
  jj +=  14   //B
  jj +=  6
  jj +=  4
  jj +=  28
  jj +=  30
  println(jj)
  val tmp=jj.indexOf(30)
  println(tmp) 
  }
}
   
   
   /**
   * Q.12 WAP to merge given lists
   */
   
object Solution
{
  
  def main(args: Array[String]): Unit = 
 {
  var tt =  List(1,2,3,4,5)
  println(tt)
  // merge list ++,:::,concat method
  var jj = List(12,14,6,4,28,30)
  println(jj)
  val tmp=tt ++ jj
  val tmp1=tt ::: jj
  val tmp2=List.concat(tt,jj)
  println(tmp)
  println(tmp1)
  println(tmp2)
 
  }
}   
   
   
   /**
   * Q.13 WAP to find the even and odd numbers from a given list
   */
   
object Solution
{
  
  def main(args: Array[String]): Unit = 
 {
  var tt =  List(1,2,3,4,5)
  println(tt)
  var jj = List(12,14,6,4,28,30)
  println(jj)
  val even_nums=tt.filter(_%2 ==0)
  val odd_nums=tt.filter(_%2 !=0)
  println(even_nums)
  println(odd_nums)
  }
}   

/**
   * Q.14 WAP to find the nth element of a given list
   */
   
object Solution
{
  def Pth_num[A](nums:List[A],n:Int):A={
    nums(n)
  }
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  println(Pth_num(nums,2))
 
  }
}   

/**
   * Q.15 WAP to find an element from the last position of a given list
   */
   
object Solution
{
  def last_Pth_num[A](nums:List[A],n:Int):A={
    nums.takeRight(n).head
  }
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  println(last_Pth_num(nums,2))
 
  }
}   
   
   
   /**
   * Q.16 WAP to reverse a given list
   */
   
   
object Solution
{
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  var k=nums.reverse
  println(k)
  }
}   

  /**
   * Q.17 WAP to add each element n times to a given list of integers
   */
   
   
object Solution
{
  def n_times_elem[P](list:List[P],n:Int):List[P]={
    list flatMap{element=>List.fill(n)(element)}
  }
 
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
 println(n_times_elem(nums,4))
}
}
   
   
     /**
   * Q.18 WAP to check whether a list contains a sublist
   */
   
   
object Solution
{
  def sublist[P](list1:List[P],list2:List[P]):Boolean={
    list1.forall(list2.contains)
  }
 
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
 println(sublist(List(1,2,5), List(1,2,3,4)))
}
}
   
    /**
   * Q.19 *WAP to count the number of occurrences of each element in a given list
   */
   
   
object Solution
{
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6,6,6,7,9,7)
  println(nums)
  var v=nums.groupBy(identity).mapValues(_.size)
  println(v)
  }
}   
   
   
     /**
   * Q.20 WAP to split a given list into two lists
   */
   
   
object Solution
{
  def split_List[P](nums:List[P],n:Int):(List[P],List[P])={
    (nums.take(n),nums.drop(n))
  }
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  println(split_List(nums,2))
  }
}
   
   
     /**
   * Q.21 WAP to calculate the length of a given list 
   */
   
   
object Solution
{
 
  def main(args: Array[String]): Unit = 
 {
  var nums=List(1,2,3,4,5,6)
  println(nums)
  var k=nums.length
  println(k)
  }
}   
   
   
    /** Array
   * Q.1 WAP to sum values of an given array.
   */
   
object Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(20,30,40,60,70)
      
        println("Array elements are : ")
        var sum =0
        for ( m <- 0 to (Marks.length-1)) {
          sum+=Marks(m);
            
        }
        println("sum is " + sum)
    }
}

   /** 
   * Q.2 WAP to calculate the average value of an array of element.
   */
   
   
object Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(78,89,56,45,79,146,178,193,167,154)
      
        println("Array elements are : ")
        var sum =0.0
        var avg=0.0
        for ( m <- 0 to (Marks.length-1)) {
          sum+=Marks(m);
          avg=sum/Marks.length  
        }
        println("sum is " + sum);
        println("avg is " + avg);
    }
}


     /** 
   * Q.3 WAP to find index of an element in a given array >-Exception in thread "main" scala.util.control.BreakControl
   */
   
   
import scala.util.control.Breaks._
object Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(78,89,56,45,79,146,178,193,167,154)
        for ( m <- 0 to (Marks.length-1)) {
          var v=0;
          v=Marks.indexWhere(_ ==154);
          println(v);
          break;
        }
        
       
    }
}   

   /** 
   * Q.4 WAP to find maximum and minimum value of an array of integers.
   */
   
   
object Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(78,89,56,45,79,146,178,193,167,154,224)
        var max= Marks(0);
        for ( m <- 0 to (Marks.length-1)) {
           if (Marks(m)>max){
             max=Marks(m);
           }
        }
        var min= Marks(0);
        for ( m <- 0 to (Marks.length-1)) {
           if (Marks(m)<min){
             min=Marks(m);
           }
        }
        println("Max is " + max);
        println("Min is " + min);
    }
}

  /** 
   * Q.5 WAP to find common  elements between two arrays of integers.
   */
   
   
object Solution {
   def main(args: Array[String]) {
        var code=Array(40,50,60,70,80)
        var rack=Array(41,51,65,75,80)
        //var i=0
        for(r<-0 to rack.length-1){
            for(c<-0 to code.length-1){
                if (rack(r)==code(c)){
                    println("the common value is " + rack(r));
                    }
            }
        }
  }
}   


 /** 
   * Q.6 WAP to find common  elements between two arrays of strings
   */
   
   
object Solution {
   def main(args: Array[String]) {
        var code=Array('A','B','C')
        var rack=Array('Q','E','C')
        //var i=0
        for(r<-0 to rack.length-1){
            for(c<-0 to code.length-1){
                if (rack(r)==code(c)){
                    println("the common value is " + rack(r));
                    }
            }
        }
  }
}

/** 
   * Q.7 WAP to remove duplicate elements between two arrays of strings
   */
   

object Scala_Array {   
   def main(args: Array[String]): Unit = {     
       var tt = Array("kty", "jhk", "opu", "lpo", "sdo", "yui", "kty");
       //println("Orginal array:")
       for ( x <- tt) {
         print(s"${x}, ")    
        }      

        var f =0
        for (i <- 0 to tt.length-1)
         {
           var x = f+1;
           for (j <- x to tt.length-1)
            {
                if(tt(f) == tt(x) && (f != x) )
                {
                    println("\nThere is a duplicate element in the array: "+tt(x));
                }
              x=x+1;
            }
           f=f+1;
        }
       }
}


/** 
   * Q.8 WAP to remove duplicate elements between two arrays of integers
   */
   

object Scala_Array {   
   def main(args: Array[String]): Unit = {     
       var pk = Array(1,2,3,4,1,5,6,7,8,8,9);
       //println("Orginal array:")
       for ( x <- pk) {
         print("\nThe array is " +x)        
        }      

        var f =0
        for (i <- 0 to pk.length-1)
         {
           var x = f+1;
           for (j <- x to pk.length-1)
            {
                if(pk(f) == pk(x) && (f != x) )
                {
                    println("\nThere is a duplicate element in the array "+pk(x));
                }
              x=x+1;
            }
           f=f+1;
        }
       }
}
   
   
   /** 
   * Q.9 WAP to get difference between the largest and smallest values in an array of integers.The length of the array must be 1 and above.
   */
   
bject Solution
{
    // Main method
    def main(args: Array[String]) 
    {
        // allocating memory of 1D Array of string. 
        var Marks = Array(78,89,56,45,79,146,178,193,167,154,224,567,345,789,765)
        var max= Marks(0);
        for ( m <- 0 to (Marks.length-1)) {
           if (Marks(m)>max){
             max=Marks(m);
           }
        }
        var min= Marks(0);
        for ( m <- 0 to (Marks.length-1)) {
           if (Marks(m)<min){
             min=Marks(m);
           }
        }
        var diff=max-min;
        println("Max is " + max);
        println("Min is " + min);
        println("The difference between maximum and minimum element of the array is "+ diff);
    }
}

  /** 
   * Q.10 WAP to remove duplicate elements of a given sorted array and return the new length of the array.
   */


object tt {
  val nums = Array(70, 70, 30, 40, 90, 90, 90, 60, 60);
   println(s"Original array length: ${nums.length}");
    println("Array elements are: ");
  def uv(nums: Array[Int]): Int = {
    var index = 1;
    for (i <- 0 to nums.length - 1) {
      if (nums(i) != nums(index)) {
        index += 1
        nums(index) = nums(i)
      }
    }
    index;
  }

  def main(args: Array[String]): Unit = {
    for (i <- 0 to nums.length - 1) {
      print(s"${nums(i)} ");
    }
    println(s"\nThe new length of the array after removing the duplicate elements is: ${uv(nums)}");
  }
}
   
   
   /** 
   * Q.11 WAP to check if a given number is present in first or last position of a given array of length 1 or more.
    */
    
    
object soultion{
  def test(x:Int,nums:Array[Int]):Boolean={
    if (nums.length<1) false
    else{
      nums.head==x ||nums.last ==x
    }
    
  }
  def main(args:Array[String]):Unit={
    println("check if the given element is at the first or last position in the array");
    var nums1=Array(23,45,67,89,467);
    var n1 = 45;
    println(s"Given number: ${n1}")
    println(" Array elements are:")
    for(x <- nums1){
      println(s"$x,")
    }
    println("\nResult:" + test(n1,nums1));
    var nums2=Array(57,73,37,69,667);
    var n2 = 57;
    println(s"Given number: ${n2}")
    println("Array elements are:")
    for(x <- nums2){
      println(s"$x,")
    }
    println("\nResult:" + test(n2,nums2));
    
  }
}    


 /** 
   * Q.12 WAP to check if the value of the first or last element of a given array (length 1 or more) are same or not.
    */
    
    
object soultion{
  def test(x:Int,nums:Array[Int]):Boolean={
    if (nums.length<1) false
    else{
      nums.head == nums.last 
    }
    
  }
  def main(args:Array[String]):Unit={
    println("check if the first or last element in the array is same");
    var nums1=Array(23,45,67,89);
    var n1 = 23;
    println(s"Given number: ${n1}")
    println(" Array elements are:")
    for(x <- nums1){
      println(s"$x,")
    }	
    println("\nResult:" + test(n1,nums1));
    var nums2=Array(57,73,37,69,667);
    var n2 = 57;
    println(s"Given number: ${n2}")
    println("Array elements are:")
    for(x <- nums2){
      println(s"$x,")
    }
    println("\nResult:" + test(n2,nums2));
    
  }
}    


/** 
   * Q.13 WAP to check whether the value of the first or last element of two given array(length 1 or more) of integers are same or not.
    */


object soultion{
  def test(x:Array[Int],y:Array[Int]):Boolean={
    if (x.length<1 || y.length<1) false
    else{
      (x.head == y.head) || (x.last == y.last) 
    }
    
  }
  def main(args:Array[String]):Unit={
    var tt=Array(12,13,14,15);
    var uv =Array(17,19,56,5);
    println(test(tt,uv));
    
    
  }
}


/** 
   * Q.14 WAP to calculate sum of the last 3 elements of an array of integers.If the array length is less than 3 then return the sum of array.Return 0 if the array is empty.
    */

object soultion{
  def sumcondi(arr:Array[Int]):Int={
    if (arr.length<1) 0
    else if (arr.length >0 && arr.length <3) arr.takeRight(2).sum
    else arr.takeRight(3).sum
  }
  def main(args:Array[String]):Unit={
    var nums1=Array(23,45,67,89);
    println(" Array elements are:")
    for(x <- nums1){
      println(s"$x,")
    }
    println("\nResult:" + sumcondi(nums1));
    var nums2=Array(23,45);
    println(" Array elements are:")
    for(x <- nums2){
      println(s"$x,")
    }
    println("\nResult:" + sumcondi(nums2));
    var nums3=Array(23);
    println(" Array elements are:")
    for(x <- nums3){
      println(s"$x,")
    }
    println("\nResult:" + sumcondi(nums3));
    
    var nums_4:Array[Int]=Array()
    println("\nResult:" + sumcondi(nums_4));
  }
}

/** 
   * Q.15 WAP to create a new array taking the middle element from three array of length 5.
    */
    

object Solution {   
   def tt(x: Array[Int], y: Array[Int], z: Array[Int]): Array[Int] = {
    if (x.length != 5 || y.length != 5 || z.length != 5) throw new IllegalArgumentException("Array provieded is not of correct length!")  
    else Array(x(2), y(2), z(2))
  }   
  
   def main(args: Array[String]): Unit = {
      var gt = tt(Array(11,24,38,40,78),Array(24,36,47,58,63),Array(30,42,57,69,72))
     // Print all the array elements
      println(" The Final Array:")
        for ( x <- gt) {
          print(s"${x}, ")        
          }
      } 
 }
 
 
 /** 
   * Q.16 WAP to reverse an array of integers values.
    */
    
 object Solution {   
   def tt(nums: Array[Int]): Array[Int] = {
    var temp = 0  
    var temp1= 0
    var index_position = 0
    var index_last_position=nums.length-1
    while(index_position < index_last_position){
    temp = nums(index_position)
    temp1 = nums(index_last_position)
    nums(index_position)=temp1
    nums(index_last_position)=temp
    index_position += 1
    index_last_position -= 1
      }
    nums
  }
  def main(args: Array[String]): Unit = {
    var nums1 = Array(789, 235, 899, 146, 213) 
    println("Orginal array:")
    for ( x <- nums1) {
       print(s"${x}, ")        
     }           
    var result1= tt(nums1)
    println("\nReversed array:")
    for ( x <- result1) {
       print(s"${x}, ")        
     }     
 }
}   


 /** 
   * Q.17 WAP to check two numbers,4 or 7present in a given array of integers.
    */
    
    
object solution{
  def check(arr:Array[Int]):Boolean={
    arr.exists(x=> x==4 || x==7)
  }
  
  def main(args: Array[String]): Unit = {
    var nums1 = Array(789, 235, 899, 146, 7) 
    println("Orginal array:")
    for ( x <- nums1) {
       print(s"${x}, ")        
     }           
    println("\nThe 4 or 7 is present in the array:"+ check(nums1))

}
}
    
    
     /** 
   * Q.18 WAP to find the maximum value from first,middle and last values of a given array of integers.Array length should be 1 and more and odd.
    */
    
object solution{
  def check(nums:Array[Int]):Int={
    if(nums.length==1) nums(0)
      Array(nums(0),nums(nums.length/2),nums(nums.length-1)).max
    
  }
  
  def main(args: Array[String]): Unit = {
    var nums1 = Array(789, 235, 899, 146, 7000) 
    println("Orginal array:")
    for ( x <- nums1) {
       print(s"${x}, ")        
     }           
    println("\nMaximum value from first, middle and last values:"+ check(nums1))

}
} 


     /** 
   * Q.19 WAP to find the second largest element from a given array of integers.
    */
    
object Solution{   
   def main(args: Array[String]): Unit = {     
       var tt = Array(789, 235, 899, 146, 7000);
       println("Orginal array:")
       for ( x <- tt) {
         print(s"${x}, ")        
        }      
     scala.util.Sorting.quickSort(tt)
     var ind = tt.length-1;
     while(tt(ind)==tt(tt.length-1)){
       ind=ind-1
       }     
     println("\nSecond largest value of the array: " + tt(ind));      
   }
 }


   /** 
   * Q.20 WAP to find the second smallest element from a given array of integers.
    */
 
 object solution{
  def main(args: Array[String]): Unit = {
    var nums = Array(789, 235, 899, 146, 7000) 
    println("Orginal array:")
    for ( x <- nums) {
       print(s"${x}, ")        
     }           
    
    var min = Int.MaxValue 
    var sec_min = Int.MaxValue
    // Good Logic
    for (i <- 0 to nums.length-1)
      {
       if(nums(i)==min){
        sec_min=min;
      } else if (nums(i) < min) {
          sec_min = min;
          min = nums(i);
      } else if (nums(i) < sec_min) {
          sec_min = nums(i);
        }
    }    
    println("\nsecond lowest value of the array is:"+ sec_min);
}
}


/** 
   * Q.21 WAP to find the number of even and odd integers in a given array of integers.
    */
    

object Solution{   
   def main(args: Array[String]): Unit = {     
       var tt = Array(789, 235, 899, 146, 7000);
       println("Orginal array:")
       for ( x <- tt) {
         print(s"${x}, ")        
        }      
      var ctr =0;
      for(i <- 0 to tt.length -1){
        if(tt(i)%2 ==0){
          ctr =ctr +1;
        }
      }
     println("\nThe numbers of even values are: " + ctr);  
     println("\nThe numbers of odd values are: " + (tt.length-ctr));  
   }
 }
 
 
 /** 
   * Q.22 WAP to compute the average value of an array element except the largest and smallest values.
    */
    
 
 object Solution{   
   def main(args: Array[String]): Unit = {     
       var tt = Array(789, 235, 899, 146, 7000);
       println("Orginal array:")
       for ( x <- tt) {
         print(s"${x}, ")        
        }      
       var max = tt(0)
	     var min = tt(0)
	     var sum: Double = 0
	     for (i <- 0 to tt.length - 1)
	{
		   sum = sum + tt(i);
		   if(tt(i) > max)
			  max = tt(i);
		   else if(tt(i) < min)
			  min = tt(i);
	}
	val x: Double = ((sum-max-min) / (tt.length - 2));
	println(s"\nAverage value the array elements except the largest and smallest values: ${x}");
   }
 }
 
 
 /** 
   * Q.23 WAP to find maximum product of two integers in  a given array of integers.Input:{2,3,5,7,-7,8,-5} Pair(7,8) product:56
*/


object Solution{  
  def find_max_prod(tt: Array[Int]): Unit = {
    
    var max_pair_prod = Integer.MIN_VALUE;
		var max_i = -1
    var max_j = -1;

		for ( i<- 0 to tt.length - 1)
    {
			for (j<- i + 1 to  tt.length - 1)
			{
				if (max_pair_prod < tt(i) * tt(j))
				{
					max_pair_prod = tt(i) * tt(j);
					max_i = i;
					max_j = j;
				}
			}
		}

		println(s"\nPair is (${tt(max_i)} , ${tt(max_j)}), \nMaximum Product:  ${(tt(max_i)*tt(max_j))}");
  }
   def main(args: Array[String]): Unit = {     
       var tt = Array(789, 235, 899, 146, 7000);
       println("Orginal array:")
       for ( x <- tt) {
         print(s"${x}, ")        
        }      
       find_max_prod(tt);
   }
 }
 
 
  /** String
   * Q.1 WAP to get the character at the given index within a given String. Also print the length of the string.
*/


object tt {
  def main(args: Array[String]): Unit = {
    var str = "Vivek Shukla!";
    println("The String is = " + str);
  
    var index1 = str.charAt(0);
    var index2 = str.charAt(4);
    var index3 = str.charAt(10);
    println("The character at position 0 is:" + index1);
    println("The character at position 4 is:"+index2);
    println("The character at position 10 is:"+index3);
    println(s"Length of the string: ${str.length}")
  }
}

 /** String
   * Q.2 WAP to get the character (Unicode code point) at the given index within the String.
*/


object tt {
  def main(args: Array[String]): Unit = {
    val str = "vivek shukla";
    println("The String is = " + str);
    val val1 = str.codePointAt(1);
    val val2 = str.codePointAt(11);
    println("Character(unicode point) = " + val1);
    println("Character(unicode point) = " + val2);
  }
}

 /** String
   * Q.3 WAP to compare two strings lexicographically.
   Note: Two strings are lexicographically equal if they are the same length and contain the same characters in the same positions.
*/

object tt {

  def test(str1: String, str2: String): String = {
  
    val result = str1.compareTo(str2);

    
    if (result < 0) {
      ("\"" + str1 + "\"" +
        " is less than " +
        "\"" + str2 + "\"");
    } else if (result == 0) {
      ("\"" + str1 + "\"" +
        " is equal to " +
        "\"" + str2 + "\"");
    } else {
      ("\"" + str1 + "\"" +
        " is greater than " +
        "\"" + str2 + "\"");
    }
  }

  def main(args: Array[String]): Unit = {
    var str1 = "ASCII stands for American Standard Code for Information Interchange.";
    var str2 = "ASCII stands for American Standard Code for Information Interchange.";

    println("String 1: " + str1);
    println("String 2: " + str2);

    var result = test(str1, str2)
    println(result)
    println("========================")
    str1 = "Java actually uses Unicode, which includes ASCII";
    str2 = " Java actually uses Unicode, which includes ASCII";

    println("String 1: " + str1);
    println("String 2: " + str2);
    result = test(str1, str2)
    println(result)
    
}
}

 /** 
   * Q.4 WAP to concatenate a given string to the end of another string
*/

object tt {
  def main(args: Array[String]): Unit = {
    val str1 = "Preeti Jaduan ";
    val str2 = " is a biotechnology final year student";
    println("The strings are:")
    println("String 1: " + str1);
    println("String 2: " + str2);
    val str3 = str1.concat(str2);
    println("The concatenated string: " + str3);
  }
}

 /** 
   * Q.5 WAP to test if a given string contains the specified sequence of char values.
*/

object tt {  
  def uv(str1: String, str2: String): Boolean = {
    str1.contains(str2)   
  }
  def main(args: Array[String]): Unit = {
        var str1 = "Dialysis organ transplant and surgery ";
        var str2 = "and";
        println("The String is: " + str1);
        println("Specified sequence of char values: " + str2);
        println("check if string contains the specified sequence of char values!");
        println(uv(str1, str2));
      }
}

/** 
   * Q.6 WAP to create a new String object with the contents of a character array.
*/

object tt {
  def main(args: Array[String]): Unit = {
    val nums = Array('1', '2', '3', '4', '5', '6');
    val str = String.copyValueOf(nums, 1, 4);
    println("\nThe book contains " + str + " pages.\n");
  }
}

/** 
   * Q.7 WAP to check whether a given string ends with the contents of another string.
*/

object tt {  
  def test(str: String, end_str: String): Boolean = {
    str.endsWith(end_str)   
  }
  def main(args: Array[String]): Unit = {
        val str1 = "Java Exception Handling";
        val str2 = "Java Exception HandlinG";
        val end_str = "ng";
        val ends1 = test(str1, end_str)
        val ends2 = test(str2, end_str)
        println("Str1 ends with end_str:" + ends1);
        println("Str2 ends with end_str:" + ends2);
      }
}


/** 
   * Q.8 WAP to to check whether two String objects contain the same data.
*/

object tt {  
  def test(str1: String, str2: String): Boolean = {
    str1.equals(str2)   
  }
  def main(args: Array[String]): Unit = {
        val names1 = "Navya";
        val names2 = "Shristi";
        val names3 = "Navya";
        val equals1 = test(names1,names2);
        val equals2 = test(names1,names3);
        println("names1 is equal to names2:"+ equals1);
        println("names1 is equal to names3:"+ equals2);
      }
}

/** 
   * Q.9 WAP to compare a given string to another string, ignoring case considerations.
*/

object tt {  
  def test(str1: String, str2: String): Boolean = {
    str1.equalsIgnoreCase(str2)   
  }
  def main(args: Array[String]): Unit = {
        val names1 = "Navya";
        val names2 = "Shristi";
        val names3 = "NavyA";
        val equals1 = test(names1,names2);
        val equals2 = test(names1,names3);
        println("names1 is equal to names2:"+ equals1);
        println("names1 is equal to names3:"+ equals2);
      }
}

/** 
   * Q.10 WAP to replace a specified character with another character
*/

object tt {
  def main(args: Array[String]): Unit = {
    val str = "Bharat Chaudhary";
    val new_str = str.replace('a', 'j');
    println("The string is: " + str);
    println("Replaced String is: " + new_str);
  }
}

/** 
   * Q.11 WAP to get a substring of a given string between two specified positions.
*/

object tt {
  def main(args: Array[String]): Unit = {
    val str = "This site uses cookies to deliver our services and to show you relevant ads..";
    val new_str = str.substring(10, 20);
    println("Original = " + str);
    println("Substring between two positions (10,26) = " + new_str);

  }
}

/** 
   * Q.12 WAP to convert all the characters to lowercase, uppercase strings.
*/

object tt{

  def main(args: Array[String]): Unit = {
    val str = "This site uses cookies to deliver our services and to show you relevant ads. ";
    val upperStr = str.toUpperCase();
    val lowerStr = str.toLowerCase();
    println("Original String: " + str);
    println("String in lowercase: " + lowerStr);
    println("String in uppercase: " + upperStr);
  }
}


/** 
   * Q.13 WAP to trim any leading or trailing whitespace from a given string
*/

object tt {
  def main(args: Array[String]): Unit = {
    {
      val str = " Java Exercises ";
      val new_str = str.trim();
      println("String is:-" + str);
      println("New String:-" + new_str);
    }
  }
}

/** 
   * Q.14 WAP to find the maximum occurring character in a string
*/

object tt {
  def MaxOcChar(str1: String): Char = {
    val N = 256;
    val ctr = new Array[Int](N);
    val l = str1.length();
    for (i <- 0 to l - 1)
      ctr(str1.charAt(i)) = ctr(str1.charAt(i)) + 1;
    var max = -1;
    var result = ' ';
    for (i <- 0 to l - 1) {
      if (max < ctr(str1.charAt(i))) {
        max = ctr((str1.charAt(i)))
        result = str1.charAt(i)
      }
    }
    result
  }
  def main(args: Array[String]): Unit = {
    val str1 = "test string"
    println("The given string is: " + str1)
    println(
      "Maximum occurring character of the said string is: " + MaxOcChar(str1)
    );
   
  }
}



/** 
   * Q.15 ** WAP to print after removing duplicates from a given string.
*/

object tt {

  def rmDupliChar(s: String): String = {
    val arr1 = s.toCharArray();
    var targetStr = "";
    for (value <- s) {
      if (targetStr.indexOf(value) == -1) {
        targetStr += value;
      }
    }
    return targetStr;
  }

  def main(args: Array[String]): Unit = {
    var str1 = "digitalindia";
    println("The given string is: " + str1);
    System.out.println("After removing duplicates characters the new string is: " + rmDupliChar(str1)
    
   
   
    );
  }
}

/** 
   * Q.16 WAP to reverse every word in a given string.
*/

object tt{
  def WordsInReverse(str1: String): String = {
    val each_words = str1.split(" ");
    var revString = "";
    for (i <- 0 to each_words.length - 1) {
      val word = each_words(i);
      var reverseWord = "";
      for (j <- word.length - 1 to 0 by -1) {
        reverseWord = reverseWord + word.charAt(j);
      }
      revString = revString + reverseWord + " " ;
    }
    revString;
  }

  def main(args: Array[String]): Unit = {
    val str1 = "This is a volcano";
    println("The given string is: " + str1);
    println("The new string after reversed the words: " + WordsInReverse(str1));
  }
}

/** 
   * Q.17 WAP to count and print all the duplicates in the input string.
*/

object tt {

  def showDuplicates(str1: String): Unit = {
    val MAX_CHARS = 256;
    val ctr = new Array[Int](MAX_CHARS);
    for (i <- 0 to str1.length - 1)
      ctr(str1.charAt(i)) = ctr(str1.charAt(i)) + 1;
    for (i <- 0 to MAX_CHARS - 1)
      if (ctr(i) > 1)
        printf("%c  appears  %d  times\n", i, ctr(i));
  }

  def main(args: Array[String]): Unit = {
    val str1 = "gujarat";
    println("The given string is: " + str1);
    println("The duplicate characters and counts are: ");
    showDuplicates(str1);
   
  }
}

/** 
   * Q.18 WAP to check if two given strings are rotations of each other.
*/

object tt {

  def checkForRotation(str1: String, str2: String): Boolean = {
    return (str1.length == str2.length) && ((str1 + str1).indexOf(str2) != -1);
  }

  def main(args: Array[String]): Unit = {
    val str1 = "PQRST";
    val str2 = "QSRST";
    println("The given strings are: " + str1 + "  and  " + str2);
    println("\nThe concatination of 1st string twice is: " + str1 + str1
    );

    if (checkForRotation(str1, str2)) {
      println("The 2nd string " + str2 + "  exists in the new string."
      );
      println("\nStrings are rotations of each other");
    } 
    else {
      println("The 2nd string " + str2 + "  not exists in the new string.");
      printf("\nStrings are not rotations of each other");
    }
  }
}

/** 
   * Q.19 WAP to append two given strings such that, if the concatenation creates double characters then omit one of the characters.
*/

object tt {

  def conCat(str1: String, str2: String): String = {
    if (str1.length != 0 && str2.length != 0
        && str1.charAt(str1.length() - 1) == str2.charAt(0))
      return str1 + str2.substring(1);
    return str1 + str2;
  }

  def main(args: Array[String]): Unit = {
    val str1 = "vivek";
    val str2 = "kshukla";
    println("The given strings are: " + str1 + "  and  " + str2);
    println("The string after concatination are: " + conCat(str1, str2));
  }
}


/** 
   * Q.20 WAP to create a new string from a given string swapping the last two characters of the given string. The length of the given string must be two or more.
*/

object tt {
  def lastTwo(str1: String): String = {
    if (str1.length() < 2) return str1;
    return str1.substring(0, str1.length - 2) + str1.charAt(str1.length - 1) + str1
      .charAt(str1.length - 2);
  }
  def main(args: Array[String]): Unit = {
    var str1 = "vivek";
    println("The given strings is: " + str1);
    println("The string after swap last two characters are: " + lastTwo(str1));
    
  }
}

/** 
   * Q.21 WAP to read a string and return true if it ends with a specified string of length 2.
*/

object tt{
  def test(str1: String, end_str: String): Boolean = {
    val len = str1.length
    val vk = end_str
    if (len < 2)
      false
    else if (vk.equals(str1.substring(len - 2, len)))
      true;
    else
      false
  }
  def main(args: Array[String]): Unit = {
    var str1 = "Surgery";
    var end_str = "ry"
    println("The strings is: " + str1)
    println("The string containing " + end_str + " at last: " + test(str1, end_str))
  
  }
}

/** 
   * Q.22 WAP to read two strings append them together and return the result. If the length of the strings is different remove characters from the beginning of longer
   string and make them equal length.
*/

object tt {

  def tk(str1: String, str2: String): String = {
    if (str1.length == str2.length)
      return str1 + str2;
    if (str1.length > str2.length) {
      var diff = str1.length - str2.length;
      str1.substring(diff, str1.length) + str2;
    } else {
      var diff = str2.length - str1.length;
      str1 + str2.substring(diff, str2.length);
    }
  }
  def main(args: Array[String]): Unit = {
    var str1 = "updated";
    var str2 = "successfully";
    println("The given strings is: " + str1 + " and " + str2);
    println("The new string is: " + tk(str1, str2));
    
} 
}

/** 
   * Q.23 WAP to create a new string taking specified number of characters from first and last position of a given string. 
*/

object tt {

  def tk(str1: String, n: Int): String = {
    str1.substring(0, n) + str1.substring(str1.length - n, str1.length);
  }

  def main(args: Array[String]): Unit = {
    var str1 = "javascript programming ";
    var n1 = 4;
    println("The given strings is: " + str1);
    println("The given numbers is: " + n1);
    println("The new string is: " + tk(str1, n1));
  }
}

/** 
   * Q.24 WAP to check whether the first two characters present at the end of a given string.
*/

object tt {

  def tk(str1: String): Boolean = {
   if (str1.length < 2)
    return false;
  else if (str1.substring(0,2).equals(str1.substring(str1.length-2, str1.length)))
    return true;
  else
    return false;
  }

  def main(args: Array[String]): Unit = {
      var str1 =  "vistjkhuguoojgdjjhavhsbvhdkvi";	  
      println("The given strings is: "+str1);
      println("If first two characters present in the last!!! "+tk(str1));
      
  }
} 

/** 
   * Q.25 WAP to read a string and return the string without the first two characters. Keep the first char if it is 'g' and keep the second char if it is 'h'.
*/

object tt {
  def tk(str1: String): String = {
    var len = str1.length;
    var temp = "";
    for (i <- 0 to len - 1) {
      if (i == 0 && str1.charAt(i) == 'g')
        temp += 'g';
      else if (i == 1 && str1.charAt(i) == 'h')
        temp += 'h';
      else if (i > 1)
        temp += str1.charAt(i);
    }
    return temp;
  }
  def main(args: Array[String]): Unit = {
    var str1 = "ganesha";
    println("The given strings is: " + str1);
    println("The new string is: " + tk(str1));
  }
}

/** 
   * Q.26 WAP to read a string and if one or both of the first two characters is equal to specified character return without those characters 
          otherwise return the string unchanged
*/

object tt {
  def tk(str1: String, c: Char): String = {
    var temp = "";
    for (i <- 0 to str1.length - 1) {
      if (i == 0 && str1.charAt(i) != c)
        temp += str1.charAt(i);
      else if (i == 1 && str1.charAt(i) != c)
        temp += str1.charAt(i);
      else if (i > 1)
        temp += str1.charAt(i);
    }
    return temp;
  }

  def main(args: Array[String]): Unit = {
    var str1 = "bryophyte";
    var c = 'r'
    println("The given strings is: " + str1);
    println("The specified character is:"+c);
    println("The final string is: " + tk(str1, c));
  }
}

/** 
   * Q.27 WAP to read a string and returns after remove a specified character and its immediate left and right characters.
*/

object tt {
  def tk(str1: String, c: Char): String = {
    var len = str1.length;
    var rS = "";
    for (i <- 0 to len - 1) {
      if (i == 0 && str1.charAt(i) != c)
        rS += str1.charAt(i);
      if (i > 0 && str1.charAt(i) != c && str1.charAt(i - 1) != c)
        rS += str1.charAt(i);
      if (i > 0 && str1.charAt(i) == c && str1.charAt(i - 1) != c)
        rS = rS.substring(0, rS.length() - 1);
    }
    return rS;
  }
  def main(args: Array[String]): Unit = {
    var str1 = "test#string";
    var c = '#'
    println("The given strings is: " + str1);
    println("The new string is: " + tk(str1, c));
    str1 = "sdf$#gyhj#";
    c = '$'
    println("The given strings is: " + str1);
    println("The new string is: " + tk(str1, c));
  }
}

/** 
   * Q.28 WAP to check two given strings whether any one of them appear at the end of the other string (ignore case sensitivity)
*/

object tt {
  def tk(str1: String, str2: String): Boolean = {
    var st1 = str1.toLowerCase();
    var aLen = str1.length;
    var st2 = str2.toLowerCase;
    var bLen = st2.length();
    if (aLen < bLen) {
      var temp = st2.substring(bLen - aLen, bLen);
      if (temp.compareTo(st1) == 0)
        true;
      else
        false;
    } else {
      var temp = st1.substring(aLen - bLen, aLen);
      if (temp.compareTo(st2) == 0)
        true;
      else
        false;
    }
  }
  def main(args: Array[String]): Unit = {
    var str1 = "abcdefg";
    var str2 = "sdfsfsdfsfsdfabcdefg";
    println("The given strings are: " + str1 + "  and " + str2);
    println("Is one string appears at the end of other? " + tk(str1, str2));
  }
}




